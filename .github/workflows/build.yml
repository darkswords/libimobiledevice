name: build

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 1 * *'
  workflow_dispatch:

jobs:
  build-linux-ubuntu:
    runs-on: ubuntu-latest
    steps:
    - name: install dependencies
      run: |
          sudo apt-get update
          pip install cython
    - name: prepare environment
      run: echo "target_triplet=`gcc -dumpmachine`" >> $GITHUB_ENV
    - name: fetch libplist
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libplist-latest_${{env.target_triplet}}
        repo: libimobiledevice/libplist
    - name: fetch libusbmuxd
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libusbmuxd-latest_${{env.target_triplet}}
        repo: libimobiledevice/libusbmuxd
    - name: fetch libimobiledevice-glue
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libimobiledevice-glue-latest_${{env.target_triplet}}
        repo: libimobiledevice/libimobiledevice-glue
    - name: fetch libtatsu
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libtatsu-latest_${{env.target_triplet}}
        repo: libimobiledevice/libtatsu
    - name: install external dependencies
      run: |
          mkdir extract
          for I in *.tar; do
            tar -C extract -xvf $I
          done
          sudo cp -r extract/* /
          sudo ldconfig
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: autogen
      run: ./autogen.sh PKG_CONFIG_PATH=/usr/local/lib/pkgconfig LDFLAGS="-Wl,-rpath=/usr/local/lib" --enable-debug
    - name: make
      run: make
    - name: make install
      run: sudo make install
    - name: prepare release asset
      run: |
          mkdir -p dest
          DESTDIR=`pwd`/dest make install
          tar -C dest -czf libimobiledevice-${{ env.target_triplet }}.tar.gz usr
    - name: Create Release (if not exists)
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      with:
        tag_name: nightly-${{ github.run_number }}
        name: "Nightly Build #${{ github.run_number }}"
        draft: false
        prerelease: true
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        tag_name: nightly-${{ github.run_number }}
        files: libimobiledevice-${{ env.target_triplet }}.tar.gz
        token: ${{ secrets.GITHUB_TOKEN }}

# 可根据此结构继续扩展 build-macOS 与 build-windows 的 Release 上传逻辑
